/**
 * Copyright 2022-2024 kronos-orm
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

tasks.register("generateJoinClause") {
    group = "codegen"
    description = "generate join clauses with maxJoinNum"
    doLast {
        val root = project.layout.projectDirectory.asFile.parent
        val joinDir = File("$root/kronos-core/src/main/kotlin/com/kotlinorm/orm/join")
        val maxJoinNum = 16
        val joinRange = 2..maxJoinNum

        fun generatePatch() {
            val fileName = "Patch.kt"
            with(File(joinDir, fileName)) {
                if (!exists()) {
                    createNewFile()
                }

                writeText(
                    """
                    |/**
                    |* Copyright 2022-2024 kronos-orm
                    |*
                    |* Licensed under the Apache License, Version 2.0 (the "License");
                    |* you may not use this file except in compliance with the License.
                    |* You may obtain a copy of the License at
                    |*
                    |*     http://www.apache.org/licenses/LICENSE-2.0
                    |*
                    |* Unless required by applicable law or agreed to in writing, software
                    |* distributed under the License is distributed on an "AS IS" BASIS,
                    |* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    |* See the License for the specific language governing permissions and
                    |* limitations under the License.
                    |*/
                    |
                    |package com.kotlinorm.orm.join
                    | 
                    |import com.kotlinorm.interfaces.KPojo
                    |
                    |// Generated by generate-join-clause.gradle.kts
                    |${
                        joinRange.joinToString("\n\n") { index ->
                            val range = 1..index
                            val nthOfType = range.joinToString(", ") { "T${it}" }
                            """
                            |inline fun <${range.joinToString(",") { "reified T$it : KPojo" }}> T1.join(
                            |${range.drop(1).joinToString(",\n") { "    table$it: T$it" }},
                            |    selectFrom: SelectFrom$index<$nthOfType>.($nthOfType) -> Unit
                            |): SelectFrom$index<$nthOfType> {
                            |    return SelectFrom$index(this, ${
                                range.drop(1).joinToString(", ") { "table$it" }
                            }).apply {
                            |        selectFrom(${range.joinToString(", ") { "t$it" }})
                            |    }
                            |}
                        """
                        }
                    }
                    """.trimMargin())
            }
        }

        fun generateSelectFromN(n: Int) {
            val fileName = "SelectFrom$n.kt"
            with(File(joinDir, fileName)) {
                if (!exists()) {
                    createNewFile()
                }
                val range = 1..n
                val nthOfType = range.joinToString(", ") { "T${it}" }
                val nthOfType_ = range.joinToString(", ") { "T${it}: KPojo" }
                writeText(
                    """
                        |/**
                        |* Copyright 2022-2024 kronos-orm
                        |*
                        |* Licensed under the Apache License, Version 2.0 (the "License");
                        |* you may not use this file except in compliance with the License.
                        |* You may obtain a copy of the License at
                        |*
                        |*     http://www.apache.org/licenses/LICENSE-2.0
                        |*
                        |* Unless required by applicable law or agreed to in writing, software
                        |* distributed under the License is distributed on an "AS IS" BASIS,
                        |* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                        |* See the License for the specific language governing permissions and
                        |* limitations under the License.
                        |*/
                        |
                        |package com.kotlinorm.orm.join
                        |
                        |import com.kotlinorm.cache.kPojoAllColumnsCache
                        |import com.kotlinorm.cache.kPojoLogicDeleteCache
                        |import com.kotlinorm.interfaces.KPojo
                        |import com.kotlinorm.orm.pagination.PagedClause
                        |import kotlin.reflect.KClass
                        |
                        |// Generated by generate-join-clause.gradle.kts
                        |class SelectFrom$n<$nthOfType_>(
                        |    override var t1: T1,
                        |    ${range.drop(1).joinToString(", ") { "var t$it: T$it" }}
                        |) : SelectFrom<T1>(t1) {
                        |    override var tableName = t1.kronosTableName()
                        |    override var paramMap = (${range.joinToString(" + ") { "t$it.toDataMap()" }}).toMutableMap()
                        |    ${ range.joinToString("\n    ") { "private var kClass$it = t$it.kClass()" } }
                        |    override var logicDeleteStrategy = kPojoLogicDeleteCache[kClass1]
                        |    override var allFields = kPojoAllColumnsCache[kClass1]!!
                        |    override var listOfPojo: MutableList<Pair<KClass<KPojo>, KPojo>> = mutableListOf(
                        |        ${range.joinToString(", \n        ") { "kClass$it to t$it" }}
                        |    )
                        |    
                        |    fun withTotal(): PagedClause<T1, SelectFrom$n<$nthOfType>> {
                        |        return PagedClause(this)
                        |    }
                        |}
                    """.trimMargin()
                )
            }
        }

        fun generateJoinClauseInfo() {
            val fileName = "JoinClauseInfo.kt"
            with(File(joinDir, fileName)) {
                if (!exists()) {
                    createNewFile()
                }
                writeText(
                    """
                    |/**
                    |* Copyright 2022-2024 kronos-orm
                    |*
                    |* Licensed under the Apache License, Version 2.0 (the "License");
                    |* you may not use this file except in compliance with the License.
                    |* You may obtain a copy of the License at
                    |*
                    |*     http://www.apache.org/licenses/LICENSE-2.0
                    |*
                    |* Unless required by applicable law or agreed to in writing, software
                    |* distributed under the License is distributed on an "AS IS" BASIS,
                    |* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    |* See the License for the specific language governing permissions and
                    |* limitations under the License.
                    |*/
                    |
                    |package com.kotlinorm.orm.join
                    |
                    |import com.kotlinorm.beans.dsl.Field
                    |
                    |/**
                    | *@program: kronos-orm
                    | *@author: Jieyao Lu
                    | *@description:
                    | *@create: 2024/7/19 14:26
                    | **/
                    |// Generated by generate-join-clause.gradle.kts
                    |data class JoinClauseInfo(
                    |    val tableName: String,
                    |    val selectFields: List<Pair<String , Field>>,
                    |    val distinct: Boolean,
                    |    val pagination: Boolean,
                    |    val pageIndex: Int,
                    |    val pageSize: Int,
                    |    val limit: Int? = null,
                    |    val databaseOfTable: Map<String, String> = mapOf(),
                    |    val whereClauseSql: String? = null,
                    |    val groupByClauseSql: String? = null,
                    |    val orderByClauseSql: String? = null,
                    |    val havingClauseSql: String? = null,
                    |    val joinSql: String = ""
                    |)""".trimMargin()
                )
            }
        }

        joinDir.listFiles()?.forEach {
            if (it.name != "SelectFrom.kt") {
                it.delete()
            }
        }

        println()

        println("=====================================")
        println("> Start generating join clauses")
        println("=====================================")

        println()

        println("Max join num is $maxJoinNum")
        println("Join clauses will be generated in $joinDir")
        println()

        println("• Generating patch file:")
        generatePatch()
        println("✓ Patch file generated successfully")

        println()

        println("• Generating join clause info:")
        generateJoinClauseInfo()
        println("✓ Join clause info generated successfully")

        println()

        println("• Generating selectFromN files:")
        val rangeList = joinRange.toList()
        rangeList.forEachIndexed { index, it ->
            println("• Generating SelectFrom${it.toString().padEnd(2, ' ')}.kt\t${index + 1}/${rangeList.size}")
            generateSelectFromN(it)
        }
        println("✓ SelectFromN files generated successfully")

        println()

        println("=====================================")
        println("✓ Join clauses generated successfully")
        println("=====================================")
    }
}