import{a as h}from"./chunk-FJ26F7HW.js";import{a as t}from"./chunk-HNPVF6HZ.js";import{a as l}from"./chunk-YGVJYOZD.js";import{H as w}from"./chunk-HT2ZSXJU.js";import{Pb as p,jc as i,kc as r,ra as o,xb as g}from"./chunk-W2MTHNV2.js";import{a as d,b as c,g as k}from"./chunk-ODN5LVDJ.js";var y=k(w());var q={title:"Select Records",mdFile:"./index.md",category:h,order:6},e=q;var u=[];var b={},j=b;var E='<h1 id="select-records" class="ngde">Select Records<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#select-records"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h1><h2 id="query-all-records" class="ngde">Query all records<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#query-all-records"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">In Kronos, we can use the <code class="ngde">KPojo.select()</code> method to query records in the database.</p><ng-doc-tab group="Case 1" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> users: List&#x3C;User> = User().select().queryList()\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 1" name="Mysql" icon="mysql" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>`\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 1" name="PostgreSQL" icon="postgres" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user"\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 1" name="SQLite" icon="sqlite" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user"\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 1" name="SQLServer" icon="sqlserver" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [name], [age] <span class="hljs-keyword ngde">FROM</span> [<span class="hljs-keyword ngde">user</span>]\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 1" name="Oracle" icon="oracle" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user"\n</span></code></pre></ng-doc-tab><h2 id="use-select-to-specify-the-query-field" class="ngde">Use <span style="color: #DD6666" class="ngde">select</span> to specify the query field<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-select-to-specify-the-query-field"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The <code class="ngde">select</code> method is used to specify the query field. At this time, Kronos will generate a query field statement based on the field set by the <code class="ngde">select</code> method.</p><p class="ngde">You can pass in a string as the query field, use <code class="ngde">+</code> to connect multiple fields, and the <code class="ngde">as</code> method is used to set the field alias.</p><ng-doc-tab group="Case 16" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1,2,3,4,5]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> listOfUser: List&#x3C;User> = User()\n</span><span class="line highlighted ngde">    .select { \n</span><span class="line highlighted ngde">        it.id + it.name.`<span class="hljs-keyword ngde">as</span>`(<span class="hljs-string ngde">"username"</span>) + <span class="hljs-string ngde">"count(*)"</span>.`<span class="hljs-keyword ngde">as</span>`(<span class="hljs-string ngde">"total"</span>) + <span class="hljs-string ngde">"1"</span>\n</span><span class="line highlighted ngde">    }\n</span><span class="line highlighted ngde">    .queryList()\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 16" name="Mysql" icon="mysql" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name` <span class="hljs-keyword ngde">AS</span> `username`, <span class="hljs-built_in ngde">count</span>(<span class="hljs-operator ngde">*</span>) <span class="hljs-keyword ngde">AS</span> `total`, <span class="hljs-number ngde">1</span> <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>`\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 16" name="PostgreSQL" icon="postgres" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name" <span class="hljs-keyword ngde">AS</span> "username", <span class="hljs-built_in ngde">count</span>(<span class="hljs-operator ngde">*</span>) <span class="hljs-keyword ngde">AS</span> "total", <span class="hljs-number ngde">1</span> <span class="hljs-keyword ngde">FROM</span> "user"\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 16" name="SQLite" icon="sqlite" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", `name` <span class="hljs-keyword ngde">AS</span> `username`, <span class="hljs-built_in ngde">count</span>(<span class="hljs-operator ngde">*</span>) <span class="hljs-keyword ngde">AS</span> `total`, <span class="hljs-number ngde">1</span> <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>`\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 16" name="SQLServer" icon="sqlserver" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [name] <span class="hljs-keyword ngde">AS</span> [username], <span class="hljs-built_in ngde">count</span>(<span class="hljs-operator ngde">*</span>) <span class="hljs-keyword ngde">AS</span> [total], <span class="hljs-number ngde">1</span> <span class="hljs-keyword ngde">FROM</span> [<span class="hljs-keyword ngde">user</span>]\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 16" name="Oracle" icon="oracle" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name" <span class="hljs-keyword ngde">AS</span> "username", <span class="hljs-built_in ngde">count</span>(<span class="hljs-operator ngde">*</span>) <span class="hljs-keyword ngde">AS</span> "total", <span class="hljs-number ngde">1</span> <span class="hljs-keyword ngde">FROM</span> "user"\n</span></code></pre></ng-doc-tab><h2 id="generate-conditional-statements-and-query-records-based-on-kpojo-object-values" class="ngde">Generate conditional statements and query records based on KPojo object values<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#generate-conditional-statements-and-query-records-based-on-kpojo-object-values"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">When the <code class="ngde">by</code> or <code class="ngde">where</code> method is not used, Kronos will generate query conditional statements based on the values of the KPojo object.</p><ng-doc-blockquote type="warning" class="ngde"><p class="ngde"><code class="ngde">null</code> values will not be included in the query conditions, that is, <code class="ngde">null</code> values will not be used to generate query conditional statements. If you need to query <code class="ngde">null</code> values, please use the <code class="ngde">where</code> method to set the query conditions.</p></ng-doc-blockquote><ng-doc-tab group="Case 2" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1,3]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> user: User = User(name = <span class="hljs-string ngde">"Kronos"</span>)\n</span><span class="line ngde">\n</span><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> listOfUser: List&#x3C;User> = user.select().queryList()\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 2" name="Mysql" icon="mysql" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>` <span class="hljs-keyword ngde">WHERE</span> `name` <span class="hljs-operator ngde">=</span> :name\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 2" name="PostgreSQL" icon="postgres" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> "name" <span class="hljs-operator ngde">=</span> :name\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 2" name="SQLite" icon="sqlite" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> "name" <span class="hljs-operator ngde">=</span> :name\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 2" name="SQLServer" icon="sqlserver" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [name], [age] <span class="hljs-keyword ngde">FROM</span> [<span class="hljs-keyword ngde">user</span>] <span class="hljs-keyword ngde">WHERE</span> [name] <span class="hljs-operator ngde">=</span> :name\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 2" name="Oracle" icon="oracle" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> "name" <span class="hljs-operator ngde">=</span> :name\n</span></code></pre></ng-doc-tab><h2 id="use-by-to-set-query-conditions" class="ngde">Use <span style="color: #DD6666" class="ngde">by</span> to set query conditions<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-by-to-set-query-conditions"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The <code class="ngde">by</code> method is used to set query conditions. At this time, Kronos will generate query condition statements based on the fields set by the <code class="ngde">by</code> method.</p><ng-doc-tab group="Case 3" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[7]"><span class="line ngde"><span class="hljs-keyword ngde">val</span> user: User = User(\n</span><span class="line ngde">        id = <span class="hljs-number ngde">1</span>,\n</span><span class="line ngde">        name = <span class="hljs-string ngde">"Kronos"</span>,\n</span><span class="line ngde">        age = <span class="hljs-number ngde">18</span>\n</span><span class="line ngde">    )\n</span><span class="line ngde">\n</span><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> kronos: User? = user.select().<span class="hljs-keyword ngde">by</span> { it.id }.queryOneOrNull()\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 3" name="Mysql" icon="mysql" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>` <span class="hljs-keyword ngde">WHERE</span> `id` <span class="hljs-operator ngde">=</span> :id\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 3" name="PostgreSQL" icon="postgres" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> "id" <span class="hljs-operator ngde">=</span> :id\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 3" name="SQLite" icon="sqlite" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> "id" <span class="hljs-operator ngde">=</span> :id\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 3" name="SQLServer" icon="sqlserver" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [name], [age] <span class="hljs-keyword ngde">FROM</span> [<span class="hljs-keyword ngde">user</span>] <span class="hljs-keyword ngde">WHERE</span> [id] <span class="hljs-operator ngde">=</span> :id\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 3" name="Oracle" icon="oracle" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> "id" <span class="hljs-operator ngde">=</span> :id\n</span></code></pre></ng-doc-tab><h2 id="use-where-to-set-query-conditions" class="ngde">Use <span style="color: #DD6666" class="ngde">where</span> to set query conditions<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-where-to-set-query-conditions"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The <code class="ngde">where</code> method is used to set query conditions. At this time, Kronos will generate query condition statements based on the fields set by the <code class="ngde">where</code> method.</p><ng-doc-tab group="Case 4" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[7,9,10,11]"><span class="line ngde"><span class="hljs-keyword ngde">val</span> user: User = User(\n</span><span class="line ngde">        id = <span class="hljs-number ngde">1</span>,\n</span><span class="line ngde">        name = <span class="hljs-string ngde">"Kronos"</span>,\n</span><span class="line ngde">        age = <span class="hljs-number ngde">18</span>\n</span><span class="line ngde">    )\n</span><span class="line ngde">\n</span><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> kronos: User? = user.select().<span class="hljs-keyword ngde">where</span> { it.id }.queryOneOrNull()\n</span><span class="line ngde">\n</span><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> listOfUser: List&#x3C;User> = user.select()\n</span><span class="line highlighted ngde">                          .<span class="hljs-keyword ngde">where</span> { it.id > <span class="hljs-number ngde">1</span> &#x26;&#x26; it.age &#x3C; <span class="hljs-number ngde">20</span> }\n</span><span class="line highlighted ngde">                          .queryList()\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 4" name="Mysql" icon="mysql" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>` <span class="hljs-keyword ngde">WHERE</span> `id` <span class="hljs-operator ngde">=</span> :id\n</span><span class="line ngde">\n</span><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>` <span class="hljs-keyword ngde">WHERE</span> `id` <span class="hljs-operator ngde">></span> :id <span class="hljs-keyword ngde">and</span> `age` <span class="hljs-operator ngde">&#x3C;</span> :age\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 4" name="PostgreSQL" icon="postgres" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> "id" <span class="hljs-operator ngde">=</span> :id\n</span><span class="line ngde">\n</span><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> "id" <span class="hljs-operator ngde">></span> :id <span class="hljs-keyword ngde">and</span> "age" <span class="hljs-operator ngde">&#x3C;</span> :age\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 4" name="SQLite" icon="sqlite" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> "id" <span class="hljs-operator ngde">=</span> :id\n</span><span class="line ngde">\n</span><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> "id" <span class="hljs-operator ngde">></span> :id <span class="hljs-keyword ngde">and</span> "age" <span class="hljs-operator ngde">&#x3C;</span> :age\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 4" name="SQLServer" icon="sqlserver" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [name], [age] <span class="hljs-keyword ngde">FROM</span> [<span class="hljs-keyword ngde">user</span>] <span class="hljs-keyword ngde">WHERE</span> [id] <span class="hljs-operator ngde">=</span> :id\n</span><span class="line ngde">\n</span><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [name], [age] <span class="hljs-keyword ngde">FROM</span> [<span class="hljs-keyword ngde">user</span>] <span class="hljs-keyword ngde">WHERE</span> [id] <span class="hljs-operator ngde">></span> :id <span class="hljs-keyword ngde">and</span> [age] <span class="hljs-operator ngde">&#x3C;</span> :age\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 4" name="Oracle" icon="oracle" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> "id" <span class="hljs-operator ngde">=</span> :id\n</span><span class="line ngde">\n</span><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> "id" <span class="hljs-operator ngde">></span> :id <span class="hljs-keyword ngde">and</span> "age" <span class="hljs-operator ngde">&#x3C;</span> :age\n</span></code></pre></ng-doc-tab><h2 id="use-patch-to-add-parameters-to-custom-query-conditions" class="ngde">Use <span style="color: #DD6666" class="ngde">patch</span> to add parameters to custom query conditions<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-patch-to-add-parameters-to-custom-query-conditions"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">When the <code class="ngde">where</code> condition contains custom SQL such as: <code class="ngde">where { "id = :id".asSql() }</code>, you can use the <code class="ngde">patch</code> method to add parameters to the custom query condition.</p><ng-doc-tab group="Case 19" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1,2,3]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> user = User().select()\n</span><span class="line highlighted ngde">    .<span class="hljs-keyword ngde">where</span> { <span class="hljs-string ngde">"id = :id"</span> }\n</span><span class="line highlighted ngde">    .patch(<span class="hljs-string ngde">"id"</span> to <span class="hljs-number ngde">1</span>)\n</span><span class="line ngde">    .queryOneOrNull()\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 19" name="Mysql" icon="mysql" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>` <span class="hljs-keyword ngde">WHERE</span> id <span class="hljs-operator ngde">=</span> :id\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 19" name="PostgreSQL" icon="postgres" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> id <span class="hljs-operator ngde">=</span> :id\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 19" name="SQLite" icon="sqlite" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> id <span class="hljs-operator ngde">=</span> :id\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 19" name="SQLServer" icon="sqlserver" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [name], [age] <span class="hljs-keyword ngde">FROM</span> [<span class="hljs-keyword ngde">user</span>] <span class="hljs-keyword ngde">WHERE</span> id <span class="hljs-operator ngde">=</span> :id\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 19" name="Oracle" icon="oracle" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> id <span class="hljs-operator ngde">=</span> :id\n</span></code></pre></ng-doc-tab><h2 id="use-orderby-to-set-sorting-conditions" class="ngde">Use <span style="color: #DD6666" class="ngde">orderBy</span> to set sorting conditions<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-orderby-to-set-sorting-conditions"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The <code class="ngde">orderBy</code> method is used to set sorting conditions. At this time, Kronos will generate sorting condition statements based on the fields set by the <code class="ngde">orderBy</code> method.</p><p class="ngde">Use the <code class="ngde">asc</code> method to set ascending sorting, and use the <code class="ngde">desc</code> method to set descending sorting.</p><p class="ngde">When the sorting method is not set, the default is ascending sorting, such as: <code class="ngde">orderBy { it.id }</code>.</p><ng-doc-tab group="Case 5" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1,2,3]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> listOfUser: List&#x3C;User> = User().select()\n</span><span class="line highlighted ngde">                          .orderBy { it.id.desc() + it.name.asc() }\n</span><span class="line highlighted ngde">                          .queryList()\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 5" name="Mysql" icon="mysql" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>` <span class="hljs-keyword ngde">ORDER</span> <span class="hljs-keyword ngde">BY</span> `id` <span class="hljs-keyword ngde">DESC</span>, `name` <span class="hljs-keyword ngde">ASC</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 5" name="PostgreSQL" icon="postgres" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">ORDER</span> <span class="hljs-keyword ngde">BY</span> "id" <span class="hljs-keyword ngde">DESC</span>, "name" <span class="hljs-keyword ngde">ASC</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 5" name="SQLite" icon="sqlite" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">ORDER</span> <span class="hljs-keyword ngde">BY</span> "id" <span class="hljs-keyword ngde">DESC</span>, "name" <span class="hljs-keyword ngde">ASC</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 5" name="SQLServer" icon="sqlserver" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [name], [age] <span class="hljs-keyword ngde">FROM</span> [<span class="hljs-keyword ngde">user</span>] <span class="hljs-keyword ngde">ORDER</span> <span class="hljs-keyword ngde">BY</span> [id] <span class="hljs-keyword ngde">DESC</span>, [name] <span class="hljs-keyword ngde">ASC</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 5" name="Oracle" icon="oracle" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">ORDER</span> <span class="hljs-keyword ngde">BY</span> "id" <span class="hljs-keyword ngde">DESC</span>, "name" <span class="hljs-keyword ngde">ASC</span>\n</span></code></pre></ng-doc-tab><h2 id="use-groupby-and-having-to-set-grouping-and-aggregation-conditions" class="ngde">Use <span style="color: #DD6666" class="ngde">groupBy</span> and <span style="color: #DD6666" class="ngde">having</span> to set grouping and aggregation conditions<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-groupby-and-having-to-set-grouping-and-aggregation-conditions"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The <code class="ngde">groupBy</code> method is used to set grouping conditions, and the <code class="ngde">having</code> method is used to set aggregation conditions.</p><ng-doc-tab group="Case 6" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1,2,3,4]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> listOfUser: List&#x3C;User> = User().select()\n</span><span class="line highlighted ngde">                          .groupBy { it.age }\n</span><span class="line highlighted ngde">                          .having { it.age > <span class="hljs-number ngde">18</span> }\n</span><span class="line highlighted ngde">                          .queryList()\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 6" name="Mysql" icon="mysql" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>` <span class="hljs-keyword ngde">GROUP</span> <span class="hljs-keyword ngde">BY</span> `age` <span class="hljs-keyword ngde">HAVING</span> `age` <span class="hljs-operator ngde">></span> :age\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 6" name="PostgreSQL" icon="postgres" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">GROUP</span> <span class="hljs-keyword ngde">BY</span> "age" <span class="hljs-keyword ngde">HAVING</span> "age" <span class="hljs-operator ngde">></span> :age\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 6" name="SQLite" icon="sqlite" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">GROUP</span> <span class="hljs-keyword ngde">BY</span> "age" <span class="hljs-keyword ngde">HAVING</span> "age" <span class="hljs-operator ngde">></span> :age\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 6" name="SQLServer" icon="sqlserver" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [name], [age] <span class="hljs-keyword ngde">FROM</span> [<span class="hljs-keyword ngde">user</span>] <span class="hljs-keyword ngde">GROUP</span> <span class="hljs-keyword ngde">BY</span> [age] <span class="hljs-keyword ngde">HAVING</span> [age] <span class="hljs-operator ngde">></span> :age\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 6" name="Oracle" icon="oracle" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">GROUP</span> <span class="hljs-keyword ngde">BY</span> "age" <span class="hljs-keyword ngde">HAVING</span> "age" <span class="hljs-operator ngde">></span> :age\n</span></code></pre></ng-doc-tab><h2 id="use-limit-to-set-the-number-of-query-records" class="ngde">Use <span style="color: #DD6666" class="ngde">limit</span> to set the number of query records<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-limit-to-set-the-number-of-query-records"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The <code class="ngde">limit</code> method is used to set the number of query records. At this time, Kronos will generate query condition statements based on the number of records set by the <code class="ngde">limit</code> method.</p><ng-doc-tab group="Case 7" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1,2,3]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> listOfUser: List&#x3C;User> = User().select()\n</span><span class="line highlighted ngde">                          .limit(<span class="hljs-number ngde">10</span>)\n</span><span class="line highlighted ngde">                          .queryList()\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 7" name="Mysql" icon="mysql" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>` LIMIT <span class="hljs-number ngde">10</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 7" name="PostgreSQL" icon="postgres" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" LIMIT <span class="hljs-number ngde">10</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 7" name="SQLite" icon="sqlite" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" LIMIT <span class="hljs-number ngde">10</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 7" name="SQLServer" icon="sqlserver" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [name], [age] <span class="hljs-keyword ngde">FROM</span> [<span class="hljs-keyword ngde">user</span>] <span class="hljs-keyword ngde">OFFSET</span> <span class="hljs-number ngde">0</span> <span class="hljs-keyword ngde">ROWS</span> <span class="hljs-keyword ngde">FETCH</span> NEXT <span class="hljs-number ngde">10</span> <span class="hljs-keyword ngde">ROWS</span> <span class="hljs-keyword ngde">ONLY</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 7" name="Oracle" icon="oracle" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> ROWNUM <span class="hljs-operator ngde">&#x3C;=</span> <span class="hljs-number ngde">10</span>\n</span></code></pre></ng-doc-tab><h2 id="use-lock-to-set-a-row-lock-during-query" class="ngde">Use <span style="color: #DD6666" class="ngde">lock</span> to set a row lock during query<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-lock-to-set-a-row-lock-during-query"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The <code class="ngde">lock</code> method is used to set a row lock during query. At this time, Kronos will add a lock according to the lock type set by the <code class="ngde">lock</code> method.</p><ng-doc-tab group="Case 18" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1,2,3]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> listOfUser: List&#x3C;User> = User().select()\n</span><span class="line highlighted ngde">                          .lock()\n</span><span class="line highlighted ngde"><span class="hljs-comment ngde">//                          .lock(PessimisticLock.X)</span>\n</span><span class="line ngde">                          .queryList()\n</span><span class="line ngde">                          \n</span><span class="line ngde"><span class="hljs-keyword ngde">val</span> listOfUser: List&#x3C;User> = User().select()\n</span><span class="line ngde">                          .lock(PessimisticLock.S)\n</span><span class="line ngde">                          .queryList()\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 18" name="Mysql" icon="mysql" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>` <span class="hljs-keyword ngde">FOR</span> <span class="hljs-keyword ngde">UPDATE</span>\n</span><span class="line ngde">\n</span><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>` LOCK <span class="hljs-keyword ngde">IN</span> SHARE MODE\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 18" name="PostgreSQL" icon="postgres" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">FOR</span> <span class="hljs-keyword ngde">UPDATE</span>\n</span><span class="line ngde">\n</span><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">FOR</span> SHARE\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 18" name="SQLite" icon="sqlite" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"># Does <span class="hljs-keyword ngde">not</span> support adding <span class="hljs-type ngde">row</span> lock <span class="hljs-keyword ngde">function</span> <span class="hljs-keyword ngde">to</span> Sqlite because Sqlite itself does <span class="hljs-keyword ngde">not</span> have <span class="hljs-type ngde">row</span> lock <span class="hljs-keyword ngde">function</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 18" name="SQLServer" icon="sqlserver" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [name], [age] <span class="hljs-keyword ngde">FROM</span> [<span class="hljs-keyword ngde">user</span>] <span class="hljs-keyword ngde">OFFSET</span> <span class="hljs-number ngde">0</span> <span class="hljs-keyword ngde">ROWS</span> <span class="hljs-keyword ngde">FETCH</span> NEXT <span class="hljs-number ngde">10</span> <span class="hljs-keyword ngde">ROWS</span> <span class="hljs-keyword ngde">ONLY</span> ROWLOCK\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 18" name="Oracle" icon="oracle" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">FOR</span> <span class="hljs-keyword ngde">UPDATE</span>(NOWAIT)\n</span><span class="line ngde">\n</span><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" LOCK <span class="hljs-keyword ngde">IN</span> SHARE MODE\n</span></code></pre></ng-doc-tab><h2 id="use-page-to-set-up-paging-query" class="ngde">Use <span style="color: #DD6666" class="ngde">page</span> to set up paging query<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-page-to-set-up-paging-query"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The <code class="ngde">page</code> method is used to set up paging query. Please note that the parameters of the <code class="ngde">page</code> method start from 1.</p><p class="ngde">The syntax of paging query is different in different databases. Kronos will generate corresponding paging query statements based on different databases.</p><ng-doc-blockquote type="warning" class="ngde"><p class="ngde">After using the <code class="ngde">page</code> method, the query result will <strong class="ngde">not</strong> include the total number of records by default. If you need to query the total number of records, please use the <a href="/documentation/en/database/select-records#Use withtotal to query a paging query with the total number of records" class="ngde">withTotal method</a>.</p></ng-doc-blockquote><ng-doc-tab group="Case 8" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1,2,3]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> listOfUser: List&#x3C;User> = User().select()\n</span><span class="line highlighted ngde">                          .page(<span class="hljs-number ngde">1</span>, <span class="hljs-number ngde">10</span>)\n</span><span class="line highlighted ngde">                          .queryList()\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 8" name="Mysql" icon="mysql" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>` LIMIT <span class="hljs-number ngde">10</span> <span class="hljs-keyword ngde">OFFSET</span> <span class="hljs-number ngde">0</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 8" name="PostgreSQL" icon="postgres" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" LIMIT <span class="hljs-number ngde">10</span> <span class="hljs-keyword ngde">OFFSET</span> <span class="hljs-number ngde">0</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 8" name="SQLite" icon="sqlite" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" LIMIT <span class="hljs-number ngde">10</span> <span class="hljs-keyword ngde">OFFSET</span> <span class="hljs-number ngde">0</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 8" name="SQLServer" icon="sqlserver" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [name], [age] <span class="hljs-keyword ngde">FROM</span> [<span class="hljs-keyword ngde">user</span>] <span class="hljs-keyword ngde">OFFSET</span> <span class="hljs-number ngde">0</span> <span class="hljs-keyword ngde">ROWS</span> <span class="hljs-keyword ngde">FETCH</span> NEXT <span class="hljs-number ngde">10</span> <span class="hljs-keyword ngde">ROWS</span> <span class="hljs-keyword ngde">ONLY</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 8" name="Oracle" icon="oracle" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> ROWNUM <span class="hljs-operator ngde">&#x3C;=</span> <span class="hljs-number ngde">10</span>\n</span></code></pre></ng-doc-tab><h2 id="use-db-to-set-the-query-database-cross-database-query" class="ngde">Use <span style="color: #DD6666" class="ngde">db</span> to set the query database (cross-database query)<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-db-to-set-the-query-database-cross-database-query"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The <code class="ngde">db</code> method is used for cross-database query. In this case, Kronos will set the query database according to the parameters of the <code class="ngde">db</code> method.</p><ng-doc-tab group="Case 20" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1,2,3]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> listOfUser: List&#x3C;User> = User()\n</span><span class="line highlighted ngde">            .db(<span class="hljs-string ngde">"user_database"</span>)\n</span><span class="line highlighted ngde">            .select { it.id + it.username }\n</span><span class="line ngde">            .queryList()\n</span><span class="line ngde">\n</span><span class="line ngde"><span class="hljs-comment ngde">// Or the db method can be called directly after select</span>\n</span><span class="line ngde"><span class="hljs-comment ngde">// val listOfUser: List&#x3C;User> = User()</span>\n</span><span class="line ngde"><span class="hljs-comment ngde">//            .select { it.id + it.username }</span>\n</span><span class="line ngde"><span class="hljs-comment ngde">//            .db("user_database")</span>\n</span><span class="line ngde"><span class="hljs-comment ngde">//            .queryList()</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 20" name="Mysql" icon="mysql" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `username` <span class="hljs-keyword ngde">FROM</span> `user_database`.`<span class="hljs-keyword ngde">user</span>` \n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 20" name="PostgreSQL" icon="postgres" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "username" <span class="hljs-keyword ngde">FROM</span> "user_database"."user" \n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 20" name="SQLite" icon="sqlite" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"># The Sqlite <span class="hljs-keyword ngde">cross</span><span class="hljs-operator ngde">-</span>database query <span class="hljs-keyword ngde">function</span> <span class="hljs-keyword ngde">is</span> <span class="hljs-keyword ngde">not</span> supported because Sqlite needs <span class="hljs-keyword ngde">to</span> configure dblink <span class="hljs-keyword ngde">for</span> <span class="hljs-keyword ngde">cross</span><span class="hljs-operator ngde">-</span>database query <span class="hljs-keyword ngde">and</span> query based <span class="hljs-keyword ngde">on</span> it\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 20" name="SQLServer" icon="sqlserver" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [username] <span class="hljs-keyword ngde">FROM</span> [user_database].[<span class="hljs-keyword ngde">user</span>]\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 20" name="Oracle" icon="oracle" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"># Oracle <span class="hljs-keyword ngde">cross</span><span class="hljs-operator ngde">-</span>database query <span class="hljs-keyword ngde">function</span> <span class="hljs-keyword ngde">is</span> <span class="hljs-keyword ngde">not</span> supported because Oracle <span class="hljs-keyword ngde">cross</span><span class="hljs-operator ngde">-</span>database query requires the configuration <span class="hljs-keyword ngde">of</span> dblink <span class="hljs-keyword ngde">and</span> query based <span class="hljs-keyword ngde">on</span> it\n</span></code></pre></ng-doc-tab><h2 id="use-the-single-method-to-query-a-single-record" class="ngde">Use the <span style="color: #DD6666" class="ngde">single</span> method to query a single record<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-the-single-method-to-query-a-single-record"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The <code class="ngde">single</code> method is actually an abbreviation of <code class="ngde">limit(1)</code> and is used to query a single record.</p><ng-doc-tab group="Case 9" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> user: User = User().select().single().queryOne()\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 9" name="Mysql" icon="mysql" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> `id`, `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>` LIMIT <span class="hljs-number ngde">1</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 9" name="PostgreSQL" icon="postgres" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" LIMIT <span class="hljs-number ngde">1</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 9" name="SQLite" icon="sqlite" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", `name`, `age` <span class="hljs-keyword ngde">FROM</span> `<span class="hljs-keyword ngde">user</span>` LIMIT <span class="hljs-number ngde">1</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 9" name="SQLServer" icon="sqlserver" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> [id], [name], [age] <span class="hljs-keyword ngde">FROM</span> [<span class="hljs-keyword ngde">user</span>] <span class="hljs-keyword ngde">OFFSET</span> <span class="hljs-number ngde">0</span> <span class="hljs-keyword ngde">ROWS</span> <span class="hljs-keyword ngde">FETCH</span> NEXT <span class="hljs-number ngde">1</span> <span class="hljs-keyword ngde">ROWS</span> <span class="hljs-keyword ngde">ONLY</span>\n</span></code></pre></ng-doc-tab><ng-doc-tab group="Case 9" name="Oracle" icon="oracle" class="ngde"><pre class="ngde hljs"><code class="hljs language-sql code-lines ngde" lang="sql" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">SELECT</span> "id", "name", "age" <span class="hljs-keyword ngde">FROM</span> "user" <span class="hljs-keyword ngde">WHERE</span> ROWNUM <span class="hljs-operator ngde">&#x3C;=</span> <span class="hljs-number ngde">1</span>\n</span></code></pre></ng-doc-tab><h2 id="use-the-query-method-to-query-the-map-list" class="ngde">Use the <span style="color: #DD6666" class="ngde">query</span> method to query the Map list<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-the-query-method-to-query-the-map-list"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The <code class="ngde">query</code> method is used to execute a query and return a Map list.</p><ng-doc-tab group="Case 10" name="demo" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> listOfUser: List&#x3C;Map&#x3C;String, Any>> = User().select().query()\n</span></code></pre></ng-doc-tab><h2 id="use-querylist-to-query-a-list-of-a-specified-type" class="ngde">Use queryList to query a list of a specified type<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-querylist-to-query-a-list-of-a-specified-type"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The queryList method is used to execute a query and return a list of a specified type. It can accept generic parameters.</p><p class="ngde">When querying a single column, you can directly set the generic parameter to the type of the column, for example: queryList <int class="ngde">().</int></p><p class="ngde">When querying multiple columns, you can set the generic parameter to a subclass of KPojo, for example: queryList <user class="ngde">().</user></p><p class="ngde">When no generic parameter is set, Kronos automatically converts the query result to the KPojo type of the query.</p><ng-doc-blockquote type="note" class="ngde"><p class="ngde">queryList uses KCP to convert Map to KPojo. For details, see: Conversion between KPojo and Map</p></ng-doc-blockquote><ng-doc-tab group="Case 11" name="demo" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1,3]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> listOfUser: List&#x3C;User> = User().select().queryList()\n</span><span class="line ngde">\n</span><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> listOfAnotherUser: List&#x3C;AnotherUser> = User().select().queryList&#x3C;AnotherUser>()\n</span></code></pre></ng-doc-tab><h2 id="use-querymap-to-query-map" class="ngde">Use <span style="color: #DD6666" class="ngde">queryMap</span> to query Map<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-querymap-to-query-map"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The <code class="ngde">queryMap</code> method is used to execute a query and return a Map. When the query result is empty, <code class="ngde">null</code> is returned.</p><ng-doc-tab group="Case 12" name="demo" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> user: Map&#x3C;String, Any> = User().select().queryMap()\n</span></code></pre></ng-doc-tab><h2 id="use-queryone-to-query-a-single-record" class="ngde">Use queryOne to query a single record<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-queryone-to-query-a-single-record"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The queryOne method is used to execute a query and return a single record. When the query result is empty, an exception is thrown. Generic parameters can be accepted.</p><p class="ngde">When querying a single column, the generic parameter can be directly set to the column type, for example: queryOne <int class="ngde">()`.</int></p><p class="ngde">When querying multiple columns, the generic parameter can be set to a subclass of KPojo, for example: queryOne <user class="ngde">()`.</user></p><p class="ngde">When the generic parameter is not set, Kronos automatically converts the query result to the KPojo type of the query.</p><ng-doc-blockquote type="note" class="ngde"><p class="ngde">queryOne uses KCP to convert Map to KPojo. For details, see: KPojo and Map conversion</p></ng-doc-blockquote><ng-doc-tab group="Case 13" name="demo" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> user: User = User().select().queryOne()\n</span></code></pre></ng-doc-tab><h2 id="use-queryoneornull-to-query-a-single-record-optional" class="ngde">Use queryOneOrNull to query a single record (optional)<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-queryoneornull-to-query-a-single-record-optional"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">Similar to the queryOne method, the queryOneOrNull method is used to execute a query and return a single record. When the query result is empty, it returns null and can accept generic parameters.</p><p class="ngde">When querying a single column, you can directly set the generic parameter to the column type, for example: queryOneOrNull <int class="ngde">()`.</int></p><p class="ngde">When querying multiple columns, you can set the generic parameter to a subclass of KPojo, for example: queryOneOrNull <user class="ngde">()`.</user></p><p class="ngde">When the generic parameter is not set, Kronos automatically converts the query result to the KPojo type of the query.</p><ng-doc-blockquote type="note" class="ngde"><p class="ngde">queryOneOrNull uses KCP to implement Map conversion to KPojo. For details, see: KPojo and Map conversion</p></ng-doc-blockquote><ng-doc-tab group="Case 14" name="demo" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> user: User? = User().select().queryOneOrNull()\n</span></code></pre></ng-doc-tab><h2 id="use-withtotal-to-query-a-paginated-query-with-a-total-number-of-records" class="ngde">Use <span style="color: #DD6666" class="ngde">withTotal</span> to query a paginated query with a total number of records<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-withtotal-to-query-a-paginated-query-with-a-total-number-of-records"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">The <code class="ngde">withTotal</code> method is used to query a paginated query with a total number of records. In this case, Kronos will include the total number of records in the query results.</p><p class="ngde">The withTotal method returns a <code class="ngde">PageClause</code> object, and you can use the <code class="ngde">query</code>, <code class="ngde">queryList</code> and other methods to get the query results.</p><ng-doc-tab group="Case 15" name="demo" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1,2,3,4]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> (total, listOfUser) = User().select()\n</span><span class="line highlighted ngde">                        .page(<span class="hljs-number ngde">1</span>, <span class="hljs-number ngde">10</span>)\n</span><span class="line highlighted ngde">                        .withTotal()\n</span><span class="line highlighted ngde">                        .queryList()\n</span><span class="line ngde">                          \n</span><span class="line ngde"><span class="hljs-comment ngde">// total: Int, listOfUser: List&#x3C;User></span>\n</span></code></pre></ng-doc-tab><h2 id="use-a-specified-data-source" class="ngde">Use a specified data source<a title="Link to heading" class="ng-doc-header-link ngde" href="/en/database/select-records#use-a-specified-data-source"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">In Kronos, we can use a specified data source to query records in the database.</p><ng-doc-tab group="Case 17" name="kotlin" icon="kotlin" class="ngde"><pre class="ngde hljs"><code class="hljs language-kotlin code-lines ngde" lang="kotlin" name="" icon="" highlightedlines="[1]"><span class="line highlighted ngde"><span class="hljs-keyword ngde">val</span> customWrapper = CustomWrapper()\n</span><span class="line ngde">\n</span><span class="line ngde"><span class="hljs-keyword ngde">val</span> listOfUser: List&#x3C;User> = User().select().queryList(customWrapper)\n</span></code></pre></ng-doc-tab>',C=(()=>{let s=class s extends l{constructor(){super(),this.routePrefix="",this.pageType="guide",this.pageContent=E,this.page=e,this.demoAssets=j}};s.\u0275fac=function(a){return new(a||s)},s.\u0275cmp=o({type:s,selectors:[["ng-doc-page-en-database-select-records"]],standalone:!0,features:[i([{provide:l,useExisting:s},u,e.providers??[]]),g,r],decls:1,vars:0,template:function(a,O){a&1&&p(0,"ng-doc-page")},dependencies:[t],encapsulation:2,changeDetection:0});let n=s;return n})(),L=[c(d({},(0,y.isRoute)(e.route)?e.route:{}),{path:"",component:C,title:"Select Records"})],x=L;export{C as DynamicComponent,x as default};
