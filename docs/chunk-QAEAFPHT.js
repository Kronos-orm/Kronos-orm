import{a as h}from"./chunk-CG4UHNJO.js";import{a as g}from"./chunk-FVAUZTMF.js";import"./chunk-HFYZ5PKQ.js";import{a as n}from"./chunk-2DBUGSSC.js";import"./chunk-XLVKZVFL.js";import{J as F}from"./chunk-H5O67WVB.js";import"./chunk-FLHNG7GK.js";import"./chunk-7JTQAWMY.js";import"./chunk-RHDDKGHQ.js";import{Ub as c,pa as r,rc as l,sc as p,xb as d}from"./chunk-WBN6TKF6.js";import{a as o,b as i,h as k}from"./chunk-TWZW5B45.js";var f=k(F());var b={title:"Code First",mdFile:"./index.md",route:"code-first",category:h},s=b;var m=[];var v={},u=v;var C=`<p class="ngde">ORM (Object-Relational Mapping, Object-Relational Mapping) is a technique for mapping between an object model and a relational database.ORM allows developers to manipulate databases using object-oriented programming without having to write direct SQL statements. In ORM, "Code First" is a development methodology that emphasizes defining database structures from code. Specifically, the developer first defines the data model by writing classes (usually entity classes), and then the ORM framework automatically generates database tables and relationships based on these classes. Here are some key features of Code First:</p><ol class="ngde"><li class="ngde"><strong class="ngde">Model First</strong>: The developer defines the entity classes and their properties first, rather than designing the database table structure first. This approach allows developers to focus more on business logic.</li><li class="ngde"><strong class="ngde">Automatic Migration</strong>: Many ORM frameworks (such as Entity Framework) support an automatic migration feature that automatically updates the database structure based on changes in the code. This reduces the effort of manually modifying database tables.</li><li class="ngde"><strong class="ngde">Flexibility</strong>: The Code First approach makes it easier to make model changes and adjustments during development because the database structure is code driven.</li><li class="ngde"><strong class="ngde">Configuration Method</strong>: Developers can configure the mapping relationships of entity classes, such as specifying primary keys, foreign keys, column names, etc., through Data Annotations or the Fluent API.</li><li class="ngde"><strong class="ngde">Version Control</strong>: Since the database structure is generated by code, developers can incorporate changes to the data model into a version control system (e.g., Git), which makes team collaboration and code review easier.</li></ol><h3 id="example" href="documentation/en/concept/code-first" headinglink="true" class="ngde">Example<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="example"></ng-doc-heading-anchor></h3><p class="ngde">Suppose we have a simple user entity class:</p><pre class="shiki shiki-themes github-light ayu-dark" style="background-color:#fff;--shiki-dark-bg:#0b0e14;color:#24292e;--shiki-dark:#bfbdb6" tabindex="0"><code class="language-kotlin"><span class="line"><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde">data</span><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde"> class</span><span style="color:#6F42C1;--shiki-dark:#59C2FF" class="ngde"> User</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">(</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde">   val</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde"> id: </span><span style="color:#6F42C1;--shiki-dark:#59C2FF" class="ngde">Int</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">?</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde">   val</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde"> name: </span><span style="color:#6F42C1;--shiki-dark:#59C2FF" class="ngde">String</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">?</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#FF8F40" class="ngde">   val</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde"> email: </span><span style="color:#6F42C1;--shiki-dark:#59C2FF" class="ngde">String</span><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">?</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#BFBDB6" class="ngde">): </span><span style="color:#6F42C1;--shiki-dark:#59C2FF" class="ngde">KPojo</span></span></code></pre><p class="ngde">Using Code First, the ORM framework automatically generates a database table named <code class="ngde">user</code> with the fields <code class="ngde">id</code>, <code class="ngde">name</code> and <code class="ngde">email</code> based on this class.</p><h3 id="summary" href="documentation/en/concept/code-first" headinglink="true" class="ngde">Summary<ng-doc-heading-anchor class="ng-doc-anchor ngde" anchor="summary"></ng-doc-heading-anchor></h3><p class="ngde">Code First is a convenient and efficient way to approach database development, especially for rapid development and iterative scenarios. It allows developers to manage and maintain the data model directly at the code level, thus increasing development efficiency and flexibility.</p>`,D=(()=>{let e=class e extends n{constructor(){super(),this.pageType="guide",this.pageContent=C,this.editSourceFileUrl="https://github.com/Kronos-orm/Kronos-orm/edit/docs/src/app/docs/en/6.concept/1.code-first/index.md?message=docs(): describe your changes here...",this.viewSourceFileUrl="https://github.com/Kronos-orm/Kronos-orm/blob/docs/src/app/docs/en/6.concept/1.code-first/index.md",this.page=s,this.demoAssets=u}};e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=r({type:e,selectors:[["ng-doc-page-qsgaosy3"]],standalone:!0,features:[l([{provide:n,useExisting:e},m,s.providers??[]]),d,p],decls:1,vars:0,template:function(t,x){t&1&&c(0,"ng-doc-page")},dependencies:[g],encapsulation:2,changeDetection:0});let a=e;return a})(),B=[i(o({},(0,f.isRoute)(s.route)?s.route:{}),{path:"",component:D,title:"Code First"})],U=B;export{D as PageComponent,U as default};
